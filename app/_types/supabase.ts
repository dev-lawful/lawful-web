/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/boardStates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boardStates.id"];
          boardId?: parameters["rowFilter.boardStates.boardId"];
          description?: parameters["rowFilter.boardStates.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["boardStates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** boardStates */
          boardStates?: definitions["boardStates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boardStates.id"];
          boardId?: parameters["rowFilter.boardStates.boardId"];
          description?: parameters["rowFilter.boardStates.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boardStates.id"];
          boardId?: parameters["rowFilter.boardStates.boardId"];
          description?: parameters["rowFilter.boardStates.description"];
        };
        body: {
          /** boardStates */
          boardStates?: definitions["boardStates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/boards": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boards.id"];
          created_at?: parameters["rowFilter.boards.created_at"];
          teamId?: parameters["rowFilter.boards.teamId"];
          name?: parameters["rowFilter.boards.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["boards"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** boards */
          boards?: definitions["boards"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boards.id"];
          created_at?: parameters["rowFilter.boards.created_at"];
          teamId?: parameters["rowFilter.boards.teamId"];
          name?: parameters["rowFilter.boards.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.boards.id"];
          created_at?: parameters["rowFilter.boards.created_at"];
          teamId?: parameters["rowFilter.boards.teamId"];
          name?: parameters["rowFilter.boards.name"];
        };
        body: {
          /** boards */
          boards?: definitions["boards"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/initiatives": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.initiatives.id"];
          createdAt?: parameters["rowFilter.initiatives.createdAt"];
          title?: parameters["rowFilter.initiatives.title"];
          description?: parameters["rowFilter.initiatives.description"];
          content?: parameters["rowFilter.initiatives.content"];
          teamId?: parameters["rowFilter.initiatives.teamId"];
          dueDate?: parameters["rowFilter.initiatives.dueDate"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["initiatives"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** initiatives */
          initiatives?: definitions["initiatives"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.initiatives.id"];
          createdAt?: parameters["rowFilter.initiatives.createdAt"];
          title?: parameters["rowFilter.initiatives.title"];
          description?: parameters["rowFilter.initiatives.description"];
          content?: parameters["rowFilter.initiatives.content"];
          teamId?: parameters["rowFilter.initiatives.teamId"];
          dueDate?: parameters["rowFilter.initiatives.dueDate"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.initiatives.id"];
          createdAt?: parameters["rowFilter.initiatives.createdAt"];
          title?: parameters["rowFilter.initiatives.title"];
          description?: parameters["rowFilter.initiatives.description"];
          content?: parameters["rowFilter.initiatives.content"];
          teamId?: parameters["rowFilter.initiatives.teamId"];
          dueDate?: parameters["rowFilter.initiatives.dueDate"];
        };
        body: {
          /** initiatives */
          initiatives?: definitions["initiatives"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/options": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          initiativeId?: parameters["rowFilter.options.initiativeId"];
          content?: parameters["rowFilter.options.content"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["options"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** options */
          options?: definitions["options"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          initiativeId?: parameters["rowFilter.options.initiativeId"];
          content?: parameters["rowFilter.options.content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.options.id"];
          initiativeId?: parameters["rowFilter.options.initiativeId"];
          content?: parameters["rowFilter.options.content"];
        };
        body: {
          /** options */
          options?: definitions["options"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/organizationMembers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizationMembers.id"];
          userId?: parameters["rowFilter.organizationMembers.userId"];
          organizationId?: parameters["rowFilter.organizationMembers.organizationId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["organizationMembers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** organizationMembers */
          organizationMembers?: definitions["organizationMembers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizationMembers.id"];
          userId?: parameters["rowFilter.organizationMembers.userId"];
          organizationId?: parameters["rowFilter.organizationMembers.organizationId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizationMembers.id"];
          userId?: parameters["rowFilter.organizationMembers.userId"];
          organizationId?: parameters["rowFilter.organizationMembers.organizationId"];
        };
        body: {
          /** organizationMembers */
          organizationMembers?: definitions["organizationMembers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/organizations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          createdAt?: parameters["rowFilter.organizations.createdAt"];
          name?: parameters["rowFilter.organizations.name"];
          slug?: parameters["rowFilter.organizations.slug"];
          logoUrl?: parameters["rowFilter.organizations.logoUrl"];
          description?: parameters["rowFilter.organizations.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["organizations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          createdAt?: parameters["rowFilter.organizations.createdAt"];
          name?: parameters["rowFilter.organizations.name"];
          slug?: parameters["rowFilter.organizations.slug"];
          logoUrl?: parameters["rowFilter.organizations.logoUrl"];
          description?: parameters["rowFilter.organizations.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.organizations.id"];
          createdAt?: parameters["rowFilter.organizations.createdAt"];
          name?: parameters["rowFilter.organizations.name"];
          slug?: parameters["rowFilter.organizations.slug"];
          logoUrl?: parameters["rowFilter.organizations.logoUrl"];
          description?: parameters["rowFilter.organizations.description"];
        };
        body: {
          /** organizations */
          organizations?: definitions["organizations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tasks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          name?: parameters["rowFilter.tasks.name"];
          description?: parameters["rowFilter.tasks.description"];
          dueDate?: parameters["rowFilter.tasks.dueDate"];
          asignee?: parameters["rowFilter.tasks.asignee"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tasks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          name?: parameters["rowFilter.tasks.name"];
          description?: parameters["rowFilter.tasks.description"];
          dueDate?: parameters["rowFilter.tasks.dueDate"];
          asignee?: parameters["rowFilter.tasks.asignee"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          name?: parameters["rowFilter.tasks.name"];
          description?: parameters["rowFilter.tasks.description"];
          dueDate?: parameters["rowFilter.tasks.dueDate"];
          asignee?: parameters["rowFilter.tasks.asignee"];
        };
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/teamMembers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teamMembers.id"];
          teamId?: parameters["rowFilter.teamMembers.teamId"];
          userId?: parameters["rowFilter.teamMembers.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["teamMembers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** teamMembers */
          teamMembers?: definitions["teamMembers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teamMembers.id"];
          teamId?: parameters["rowFilter.teamMembers.teamId"];
          userId?: parameters["rowFilter.teamMembers.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teamMembers.id"];
          teamId?: parameters["rowFilter.teamMembers.teamId"];
          userId?: parameters["rowFilter.teamMembers.userId"];
        };
        body: {
          /** teamMembers */
          teamMembers?: definitions["teamMembers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          createdAt?: parameters["rowFilter.teams.createdAt"];
          name?: parameters["rowFilter.teams.name"];
          slug?: parameters["rowFilter.teams.slug"];
          description?: parameters["rowFilter.teams.description"];
          organizationId?: parameters["rowFilter.teams.organizationId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          createdAt?: parameters["rowFilter.teams.createdAt"];
          name?: parameters["rowFilter.teams.name"];
          slug?: parameters["rowFilter.teams.slug"];
          description?: parameters["rowFilter.teams.description"];
          organizationId?: parameters["rowFilter.teams.organizationId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          createdAt?: parameters["rowFilter.teams.createdAt"];
          name?: parameters["rowFilter.teams.name"];
          slug?: parameters["rowFilter.teams.slug"];
          description?: parameters["rowFilter.teams.description"];
          organizationId?: parameters["rowFilter.teams.organizationId"];
        };
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/votes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          createdAt?: parameters["rowFilter.votes.createdAt"];
          optionId?: parameters["rowFilter.votes.optionId"];
          userId?: parameters["rowFilter.votes.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          createdAt?: parameters["rowFilter.votes.createdAt"];
          optionId?: parameters["rowFilter.votes.optionId"];
          userId?: parameters["rowFilter.votes.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          createdAt?: parameters["rowFilter.votes.createdAt"];
          optionId?: parameters["rowFilter.votes.optionId"];
          userId?: parameters["rowFilter.votes.userId"];
        };
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  boardStates: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `boards.id`.<fk table='boards' column='id'/>
     */
    boardId?: number;
    /** Format: text */
    description?: string;
  };
  boards: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    teamId?: number;
    /** Format: text */
    name?: string;
  };
  initiatives: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    content?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    teamId?: number;
    /** Format: timestamp with time zone */
    dueDate?: string;
  };
  options: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `initiatives.id`.<fk table='initiatives' column='id'/>
     */
    initiativeId?: number;
    /** Format: text */
    content?: string;
  };
  organizationMembers: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    userId?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
     */
    organizationId?: number;
  };
  organizations: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    slug?: string;
    /** Format: text */
    logoUrl?: string;
    /** Format: text */
    description?: string;
  };
  tasks: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
    /** Format: timestamp with time zone */
    dueDate?: string;
    /** Format: uuid */
    asignee?: string;
  };
  teamMembers: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    teamId?: number;
    /** Format: uuid */
    userId?: string;
  };
  teams: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    slug?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
     */
    organizationId?: number;
  };
  votes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `options.id`.<fk table='options' column='id'/>
     */
    optionId?: number;
    /** Format: uuid */
    userId?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description boardStates */
  "body.boardStates": definitions["boardStates"];
  /** Format: bigint */
  "rowFilter.boardStates.id": string;
  /** Format: bigint */
  "rowFilter.boardStates.boardId": string;
  /** Format: text */
  "rowFilter.boardStates.description": string;
  /** @description boards */
  "body.boards": definitions["boards"];
  /** Format: bigint */
  "rowFilter.boards.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.boards.created_at": string;
  /** Format: bigint */
  "rowFilter.boards.teamId": string;
  /** Format: text */
  "rowFilter.boards.name": string;
  /** @description initiatives */
  "body.initiatives": definitions["initiatives"];
  /** Format: bigint */
  "rowFilter.initiatives.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.initiatives.createdAt": string;
  /** Format: text */
  "rowFilter.initiatives.title": string;
  /** Format: text */
  "rowFilter.initiatives.description": string;
  /** Format: text */
  "rowFilter.initiatives.content": string;
  /** Format: bigint */
  "rowFilter.initiatives.teamId": string;
  /** Format: timestamp with time zone */
  "rowFilter.initiatives.dueDate": string;
  /** @description options */
  "body.options": definitions["options"];
  /** Format: bigint */
  "rowFilter.options.id": string;
  /** Format: bigint */
  "rowFilter.options.initiativeId": string;
  /** Format: text */
  "rowFilter.options.content": string;
  /** @description organizationMembers */
  "body.organizationMembers": definitions["organizationMembers"];
  /** Format: bigint */
  "rowFilter.organizationMembers.id": string;
  /** Format: uuid */
  "rowFilter.organizationMembers.userId": string;
  /** Format: bigint */
  "rowFilter.organizationMembers.organizationId": string;
  /** @description organizations */
  "body.organizations": definitions["organizations"];
  /** Format: bigint */
  "rowFilter.organizations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.organizations.createdAt": string;
  /** Format: text */
  "rowFilter.organizations.name": string;
  /** Format: text */
  "rowFilter.organizations.slug": string;
  /** Format: text */
  "rowFilter.organizations.logoUrl": string;
  /** Format: text */
  "rowFilter.organizations.description": string;
  /** @description tasks */
  "body.tasks": definitions["tasks"];
  /** Format: bigint */
  "rowFilter.tasks.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.tasks.created_at": string;
  /** Format: text */
  "rowFilter.tasks.name": string;
  /** Format: text */
  "rowFilter.tasks.description": string;
  /** Format: timestamp with time zone */
  "rowFilter.tasks.dueDate": string;
  /** Format: uuid */
  "rowFilter.tasks.asignee": string;
  /** @description teamMembers */
  "body.teamMembers": definitions["teamMembers"];
  /** Format: bigint */
  "rowFilter.teamMembers.id": string;
  /** Format: bigint */
  "rowFilter.teamMembers.teamId": string;
  /** Format: uuid */
  "rowFilter.teamMembers.userId": string;
  /** @description teams */
  "body.teams": definitions["teams"];
  /** Format: bigint */
  "rowFilter.teams.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.teams.createdAt": string;
  /** Format: text */
  "rowFilter.teams.name": string;
  /** Format: text */
  "rowFilter.teams.slug": string;
  /** Format: text */
  "rowFilter.teams.description": string;
  /** Format: bigint */
  "rowFilter.teams.organizationId": string;
  /** @description votes */
  "body.votes": definitions["votes"];
  /** Format: bigint */
  "rowFilter.votes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.votes.createdAt": string;
  /** Format: bigint */
  "rowFilter.votes.optionId": string;
  /** Format: uuid */
  "rowFilter.votes.userId": string;
}

export interface operations {}

export interface external {}
